{"version":3,"sources":["App.js","index.js"],"names":["days","selectedDay","Date","useStyles","makeStyles","theme","container","display","flexWrap","textField","marginTop","spacing","marginLeft","marginRight","width","formControl","margin","minWidth","Task","marginBottom","TaskContent","paddingTop","paddingBottom","gridTemplateColumns","gridTemplateAreas","TaskText","gridArea","cursor","DeleteIcon","color","Showtask","task","kk","value","classes","useState","randomColor","bg","Card","className","style","backgroundColor","CardContent","minDeviceWidth","Typography","variant","component","text","time","duration","maxDeviceWidth","mobile","onClick","postData","then","data","window","location","reload","console","log","Showselectedtasks","tasks","map","index","Filtertasks","props","i","selectedTasks","length","date","start","getFullYear","getMonth","getDate","recurse","getDay","push","SimpleDialog","onAdd","onClose","open","values","setValues","handleClose","handleChange","event","persist","target","name","Dialog","aria-labelledby","DialogTitle","id","TextField","onChange","required","label","type","defaultValue","toString","InputLabelProps","shrink","end","inputProps","step","FormControl","InputLabel","Select","labelId","MenuItem","DialogActions","Button","preventDefault","a","url","fetch","method","mode","cache","credentials","redirect","referrerPolicy","body","JSON","stringify","App","React","setOpen","jj","setJj","useEffect","axios","result","fetchData","toLocaleString","IconButton","aria-label","obj","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fb6766c8.chunk.js","sourcesContent":["import './App.css';\nimport React, { useState, useEffect } from 'react';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport IconButton from '@material-ui/core/IconButton';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Button from '@material-ui/core/Button';\nimport Container from '@material-ui/core/Container';\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\nimport MediaQuery from \"react-responsive\";\nimport { randomColor } from \"randomcolor\";\nimport DeleteOutlineIcon from \"@material-ui/icons/DeleteOutline\";\nimport axios from 'axios';\n\nvar json = '[{\"time\":{\"start\":\"2021-03-24T12:00:00+04:30\", \"recurse\":\"weekly\", \"duration\":120}, \"text\":\"study\"}, {\"time\":{\"start\":\"2021-03-26T20:00:00+04:30\", \"recurse\":\"onetime\", \"duration\":15}, \"text\":\"train something\"}]';\nvar days = [\"yeshanbe\", \"doshanbe\", \"seshanbe\", \"charshanbe\", \"panshanbe\", \"jome\", \"shanbe\"];\nvar selectedDay = new Date();\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  textField: {\n    marginTop: theme.spacing(1),\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    width: 300,\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  Task: {\n    marginTop: \"10px\",\n    marginBottom: \"10px\",\n    marginLeft: \"16px\",\n    marginRight: \"16px\"\n  },\n  TaskContent: {\n    paddingTop: \"24px\",\n    paddingBottom: \"24px\",\n    display: \"grid\",\n    gridTemplateColumns: \"20fr 1fr\",\n    gridTemplateAreas: '\"task trash\"'\n  },\n  TaskText: {\n    gridArea: \"task\",\n    cursor: \"default\",\n    \n  },\n  DeleteIcon: { gridArea: \"trash\", color: \"#808080\", cursor: \"pointer\" },\n}));\n\nfunction Showtask(task){\n  var kk = task.value;\n  const classes = useStyles();\n  const mobile = 700;\n  const [bg,setBg]=useState(randomColor());\n  const deletekon = () => {\n    postData('https://cloud.pdcommunity.ir/timeblox/delete.php', kk)\n            .then(data => {\n              window.location.reload();\n            console.log(data); // JSON data parsed by data.json() call\n            })\n  };\n  return(\n      <Card\n        className={classes.Task}\n        style={{ backgroundColor: bg }}\n      >\n        <CardContent className={classes.TaskContent}>\n          <MediaQuery minDeviceWidth={mobile}>\n            <Typography\n              variant=\"body1\"\n              color=\"textSecondary\"\n              component=\"p\"\n              className={classes.TaskText}\n            >\n              {kk.text}\n              {\" for \"+kk.time.duration+\" minutes\"}\n            </Typography>\n          </MediaQuery>\n          <MediaQuery maxDeviceWidth={mobile - 1}>\n            <Typography\n              variant=\"body1\"\n              color=\"textSecondary\"\n              component=\"p\"\n              className={classes.TaskText}\n            >\n              {kk.text}\n              {\" for \"+kk.time.duration+\" minutes\"}  \n            </Typography>\n          </MediaQuery>\n          <DeleteOutlineIcon\n            className={classes.DeleteIcon}\n            onClick={deletekon}\n          />\n        </CardContent>\n      </Card>\n    \n  );\n}\n\nfunction Showselectedtasks(tasks){\n  return( \n  <div>\n      {tasks.value.map((value, index) => {\n        return <Showtask value={value}/>\n      })}    </div>\n  );\n}\n\nfunction Filtertasks(props){\n  var tasks = props.value;\n  var selectedTasks = [];\n\n    var i;\n    for (i =0 ; i < tasks.length ; i++ ){\n      var date = new Date(tasks[i].time.start);\n      if ((date.getFullYear() === selectedDay.getFullYear() && date.getMonth() === selectedDay.getMonth() && date.getDate() === selectedDay.getDate()) || (tasks[i].time.recurse === \"weekly\" && date.getDay() === selectedDay.getDay())){\n        selectedTasks.push(tasks[i]);\n      }}\n    return(\n      <div>\n        <Showselectedtasks value={selectedTasks}/>\n      </div>\n    );\n}\n\nfunction SimpleDialog(props) {\n  const { onAdd, onClose, open } = props;\n  const classes = useStyles();\n  const [values, setValues] = useState({});\n\n  const handleClose = () => {\n    onClose();\n  }\nconst handleAdd = (event) => {\n  event.preventDefault();\n  let kk ={time:{start:values.start, recurse:values.recurse, duration:values.end},text:values.text};\n  onAdd(kk);\n  onClose();\n}\n\nconst handleChange = (event) => {\n  event.persist();\n  setValues(values => ({ ...values, [event.target.name]: event.target.value }));\n};\n\n  return (\n    <Dialog onClose={handleClose} aria-labelledby=\"form-dialog-title\" open={open} >\n      <DialogTitle id=\"form-dialog-title\">Create a new Timeblock</DialogTitle>\n      <TextField\n        name=\"start\"\n        value={values.start}\n        onChange={handleChange} \n        required\n        id=\"datetime-local\"\n        label=\"Choose start date and time\"\n        type=\"datetime-local\"\n        defaultValue={selectedDay.toString}\n        className={classes.textField}\n        InputLabelProps={{\n          shrink: true,\n        }}\n      />\n        <TextField\n        name=\"end\"\n        value={values.end}\n        onChange={handleChange} \n        required\n        id=\"time\"\n        label=\"End time\"\n        type=\"time\"\n        className={classes.textField}\n        InputLabelProps={{\n          shrink: true,\n        }}\n        inputProps={{\n          step: 300, // 5 min\n        }}\n      />\n      <TextField required id=\"standard-required\" label=\"Task\" className={classes.textField} name=\"text\"         value={values.text}\n        onChange={handleChange} />\n      <FormControl className={classes.formControl} required>\n        <InputLabel id=\"demo-simple-select-label\">Recurse</InputLabel>\n        <Select\n          labelId=\"demo-simple-select-label\"\n          id=\"demo-simple-select\"\n          name=\"recurse\"\n          value={values.recurse}\n          onChange={handleChange} \n        >\n          <MenuItem value={\"weekly\"}>Weekly</MenuItem>\n          <MenuItem value={\"daily\"}>Daily</MenuItem>\n          <MenuItem value={\"onetime\"}>One time</MenuItem>\n        </Select>\n      </FormControl>\n      \n      <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button  color=\"primary\" onClick={handleAdd}>\n            Add\n          </Button>\n      </DialogActions>\n    </Dialog>\n  );}\n\n  async function postData(url = '', data = {}) {\n    // Default options are marked with *\n    const response = await fetch(url, {\n    method: 'POST', // *GET, POST, PUT, DELETE, etc.\n    mode: 'no-cors', // no-cors, *cors, same-origin\n    cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n    credentials: 'same-origin', // include, *same-origin, omit\n  \n    redirect: 'follow', // manual, *follow, error\n    referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n    body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n    });\n    //return response.json(); // parses JSON response into native JavaScript objects\n    }\n    \n    \nfunction App() {\n  const [open, setOpen] = React.useState(false);\n  const [jj, setJj] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await axios(\n        'https://cloud.pdcommunity.ir/timeblox/showjson.php',\n      );\n      setJj(result.data);\n    }\n    fetchData();\n  }, []);\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n  const handleAdd = (obj) =>{\n\n    //var url = 'https://cloud.pdcommunity.ir/timeblox/setjson.php?'+ JSON.stringify(obj);\n    postData('https://cloud.pdcommunity.ir/timeblox/setjson.php', obj)\n    .then(data => {\n      window.location.reload();\n    console.log(data); // JSON data parsed by data.json() call\n    });\n  }\n  return (\n    \n    <div className=\"App\">\n      <header className=\"App-header\">\n      <div id='kk'>{selectedDay.toLocaleString('fa-IR')\n.toString()}\n        <IconButton aria-label=\"delete\" color=\"primary\" onClick={handleClickOpen}>\n          <AddCircleIcon />\n        </IconButton>\n        <SimpleDialog onAdd={handleAdd} open={open} onClose={handleClose} />\n        </div>\n      <div>{days[selectedDay.getDay()]}</div>\n      <Filtertasks value={jj}/>\n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}